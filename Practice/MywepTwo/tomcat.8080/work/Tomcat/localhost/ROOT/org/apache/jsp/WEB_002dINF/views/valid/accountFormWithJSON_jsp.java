/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.25
 * Generated at: 2024-10-14 05:24:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.valid;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class accountFormWithJSON_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("file:/C:/Users/tjrwn/.m2/repository/org/glassfish/web/jakarta.servlet.jsp.jstl/2.0.0/jakarta.servlet.jsp.jstl-2.0.0.jar", Long.valueOf(1728824919696L));
    _jspx_dependants.put("jar:file:/C:/Users/tjrwn/.m2/repository/org/glassfish/web/jakarta.servlet.jsp.jstl/2.0.0/jakarta.servlet.jsp.jstl-2.0.0.jar!/META-INF/c.tld", Long.valueOf(1602841572000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>User Form</title>\r\n");
      out.write("    <!-- ì¤íì¼ ìí¸ ê²½ë¡ ìì  -->\r\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/style.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <h2>User Form</h2>\r\n");
      out.write("    <form onsubmit=\"event.preventDefault(); sendUserData();\">\r\n");
      out.write("        <div>\r\n");
      out.write("            <label for=\"username\">Username:</label>\r\n");
      out.write("            <input type=\"text\" id=\"username\" name=\"username\"/>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div>\r\n");
      out.write("            <label for=\"password\">Password:</label>\r\n");
      out.write("            <input type=\"password\" id=\"password\" name=\"password\"/>\r\n");
      out.write("        </div>\r\n");
      out.write("        <button type=\"submit\">Submit</button>\r\n");
      out.write("    </form>\r\n");
      out.write("\r\n");
      out.write("    <!-- ìë² ìëµì íìíë ìì­ -->\r\n");
      out.write("    <div id=\"response\"></div>\r\n");
      out.write("\r\n");
      out.write("    <!-- ì¤í¬ë¦½í¸ë <body> íê·¸ ìëì ëì´ì¼ í¨ -->\r\n");
      out.write("    <script>\r\n");
      out.write("        function sendUserData() {\r\n");
      out.write("            console.log(\"sendUserData í¨ìê° í¸ì¶ëììµëë¤.\");\r\n");
      out.write("            // ì¬ì©ì ìë ¥ê°ì ê°ì ¸ìµëë¤.\r\n");
      out.write("            const username = document.getElementById(\"username\").value;\r\n");
      out.write("            const password = document.getElementById(\"password\").value;\r\n");
      out.write("\r\n");
      out.write("            console.log(\"ì¬ì©ì ìë ¥ - Username:\", username, \"Password:\", password);\r\n");
      out.write("\r\n");
      out.write("            // JSON ê°ì²´ ìì±\r\n");
      out.write("            const userData = {\r\n");
      out.write("                username: username,\r\n");
      out.write("                password: password\r\n");
      out.write("            };\r\n");
      out.write("\r\n");
      out.write("            // XMLHttpRequestë¥¼ ì¬ì©íì¬ POST ìì²­ ë³´ë´ê¸°\r\n");
      out.write("            const xhr = new XMLHttpRequest();\r\n");
      out.write("            xhr.open(\"POST\", \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (jakarta.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/valid/users\", true); // POST ìì²­\r\n");
      out.write("            xhr.setRequestHeader(\"Content-Type\", \"application/json\"); // JSON ë°ì´í° ì ì¡\r\n");
      out.write("\r\n");
      out.write("            xhr.onreadystatechange = function() {\r\n");
      out.write("                if (xhr.readyState === 4 && xhr.status === 200) {\r\n");
      out.write("                    // ì±ê³µì ì¼ë¡ ì ì¡ í ìëµ ë°ìì ë ì²ë¦¬\r\n");
      out.write("                    document.getElementById(\"response\").innerText = xhr.responseText;\r\n");
      out.write("                } else if (xhr.readyState === 4 && xhr.status !== 200) {\r\n");
      out.write("                    // ì¤ë¥ ë°ì ì ì²ë¦¬\r\n");
      out.write("                    document.getElementById(\"response\").innerText = \"Error: \" + xhr.responseText;\r\n");
      out.write("                }\r\n");
      out.write("            };\r\n");
      out.write("\r\n");
      out.write("            // JSON ë°ì´í°ë¥¼ ë¬¸ìì´ë¡ ë³ííì¬ ì ì¡\r\n");
      out.write("            xhr.send(JSON.stringify(userData));\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
